{"ast":null,"code":"var _jsxFileName = \"/Users/ToshibaPc/Desktop/FullStack samples/code/bootcamp/projects/elevation-exercises/projects/react-bank/Client/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport Transcations from './components/Transcations';\nimport Operations from './components/Operations';\nimport axios from 'axios';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      transcations: []\n    };\n\n    this.componentDidMount = () => {\n      axios.get(\"http://localhost:5000/transactions\").then(response => {\n        this.setState({\n          transcations: response.data\n        });\n      });\n    };\n\n    this.getBalance = () => {\n      let sum = 0;\n      this.state.transcations.forEach(transcation => sum += parseInt(transcation.amount));\n      return sum;\n    };\n\n    this.removeTranscationById = transcationId => {\n      axios.delete(`http://localhost:5000/transaction/${transcationId}`).then(() => {\n        axios.get(\"http://localhost:5000/transactions\").then(response => {\n          this.setState({\n            transcations: response.data\n          });\n        });\n      });\n    };\n\n    this.withdraw = newTranscation => {\n      newTranscation.amount = newTranscation.amount * -1;\n      axios.post(\"http://localhost:5000/transaction\", newTranscation).then(() => {\n        axios.get(\"http://localhost:5000/transactions\").then(response => {\n          this.setState({\n            transcations: response.data\n          });\n        });\n      });\n    };\n\n    this.deposit = newTranscation => {\n      axios.post(\"http://localhost:5000/transaction\", newTranscation).then(() => {\n        axios.get(\"http://localhost:5000/transactions\").then(response => {\n          this.setState({\n            transcations: response.data\n          });\n        });\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }, \"Balance: \", this.getBalance()), /*#__PURE__*/React.createElement(Router, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      to: \"/transactions\",\n      exact: true,\n      render: () => /*#__PURE__*/React.createElement(Transcations, {\n        removeTranscationById: this.removeTranscationById,\n        transcations: this.state.transcations,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 57\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      to: \"/operations\",\n      exact: true,\n      render: () => /*#__PURE__*/React.createElement(Operations, {\n        withdraw: this.withdraw,\n        deposit: this.deposit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 55\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ToshibaPc/Desktop/FullStack samples/code/bootcamp/projects/elevation-exercises/projects/react-bank/Client/src/App.js"],"names":["React","Transcations","Operations","axios","BrowserRouter","Router","Route","App","Component","state","transcations","componentDidMount","get","then","response","setState","data","getBalance","sum","forEach","transcation","parseInt","amount","removeTranscationById","transcationId","delete","withdraw","newTranscation","post","deposit","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Transcations from './components/Transcations';\nimport Operations from './components/Operations';\nimport axios from 'axios';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nclass App extends React.Component {\n  state = {\n    transcations: []    \n  }\n\n  componentDidMount = () => {\n    axios.get(\"http://localhost:5000/transactions\").then(response => {\n      this.setState({transcations: response.data})\n    })\n  }\n\n  getBalance = () => {\n    let sum = 0;\n    this.state.transcations.forEach(transcation => sum += parseInt(transcation.amount));\n    return sum;\n  }\n\n  removeTranscationById = transcationId => {\n    axios.delete(`http://localhost:5000/transaction/${transcationId}`)\n      .then(() => {\n        axios.get(\"http://localhost:5000/transactions\")\n          .then(response => {\n            this.setState({transcations: response.data})\n          });\n      });\n  }\n\n  withdraw = newTranscation => {\n    newTranscation.amount = newTranscation.amount * -1;\n    axios.post(\"http://localhost:5000/transaction\", newTranscation)\n      .then(() => {\n        axios.get(\"http://localhost:5000/transactions\")\n          .then(response => {\n            this.setState({transcations: response.data})\n          })\n      })\n  }\n\n  deposit = newTranscation => {\n    axios.post(\"http://localhost:5000/transaction\", newTranscation)\n      .then(() => {\n        axios.get(\"http://localhost:5000/transactions\")\n          .then(response => {\n            this.setState({transcations: response.data})\n          })\n      })\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <h1>Balance: {this.getBalance()}</h1>\n        <Router>\n          <Route to=\"/transactions\" exact render={() => <Transcations removeTranscationById={this.removeTranscationById} transcations={this.state.transcations}/>} />\n          <Route to=\"/operations\" exact render={() => <Operations withdraw={this.withdraw} deposit={this.deposit}/>} />\n        </Router>\n      </React.Fragment>\n    )\n  }\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}